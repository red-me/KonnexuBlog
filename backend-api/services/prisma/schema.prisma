// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  title       String         @default("") @db.VarChar(255)
  description String         @default("") @db.VarChar(5000)
  type        String         @db.VarChar(25)
  content     Json?          @default("{}")
  published   Boolean        @default(false)
  author      User           @relation(fields: [authorId], references: [id])
  authorId    Int
  tags        Tag[]
  activities  Activity[]
  categories  PostCategory[]
  deleted     Boolean        @default(false)
}

model Activity {
  id        Int      @id @default(autoincrement())
  type      String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCategory {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  app         App      @relation(fields: [appId], references: [id])
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appId       Int
}

model Country {
  id     String  @id @default(cuid())
  iso    String?
  name   String?
  active Boolean @default(true)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  provinces Province[]
}

model Province {
  id        String   @id @default(cuid())
  name      String?
  active    Boolean  @default(true)
  country   Country? @relation(fields: [countryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  countryId String?
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  password          String
  name              String           @unique @default(cuid())
  active            Boolean
  posts             Post[]
  profile           Profile?
  privacySettings   PrivacySettings? @relation(fields: [privacySettingsId], references: [id])
  userGroup         UserGroup?       @relation(fields: [userGroupId], references: [id])
  sessionToken      String           @default("")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userGroupId       Int?
  lastActivity      DateTime         @default(now())
  lastIPAddress     String           @default("")
  privacySettingsId Int?
}

model Profile {
  id          Int     @id @default(autoincrement())
  displayName String  @default("")
  firstName   String?
  lastName    String?
  avatar      String?
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique

  location        String? @default("")
  city            String? @default("")
  zip             String? @default("")
  gender          String? @default("")
  dob             String? @default("")
  tz              String? @default("")
  spamCount       Int?    @default(0)
  primaryLanguage String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrivacySettings {
  id Int @id @default(autoincrement())

  userId Int @unique

  whoCanViewProfilePage                 String? @default("")
  whoCanViewProfilePageInfoTab          String? @default("")
  whoCanViewBasicInfo                   String? @default("")
  whoCanViewLocation                    String? @default("")
  whoCanViewProfilePageActivities       String? @default("")
  whoCanPostOnWall                      String? @default("")
  whoCanViewFriendsList                 String? @default("")
  whoCanSendFriendRequest               String? @default("")
  whoCanSendMessage                     String? @default("")
  whoCanViewProfilePagePhotos           String? @default("")
  whoCanSendPokes                       String? @default("")
  whoCanDisplayRSSSubscriberCount       String? @default("")
  whoCanSubscribeToRSS                  String? @default("")
  whoCanViewProfilePageRecentlyViewedBy String? @default("")
  whoCanTagMe                           String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isDefault Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model File {
  id            String   @id @default(uuid())
  file_path     String   @db.VarChar(1000)
  file_mimetype String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model App {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String         @unique
  url            String         @db.VarChar(1000)
  scope          String         @db.VarChar(255)
  modules        Json?
  settings       Json?
  enabled        Boolean        @default(true)
  postCategories PostCategory[]
}

model SiteSetting {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  theme     Theme?   @relation(fields: [themeId], references: [id])
  themeId   String?  @unique
}

model Theme {
  id                      String       @id @default(cuid())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  name                    String       @unique
  description             String       @default("") @db.VarChar(5000)
  featured                Boolean      @default(false)
  data                    Json?        @default("{}")
  brandLogoUrl            String       @default("")
  brandBackgroundPhotoUrl String       @default("")
  SiteSetting             SiteSetting?
  deleted                 Boolean      @default(false)
}

model Menu {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String   @default("") @db.VarChar(5000)
  data        Json?    @default("[]")
  deleted     Boolean  @default(false)
}
